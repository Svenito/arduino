#ifndef __CHARS_H__
#define __CHARS_H__

#include <inttypes.h>

void setA(int *chars) {
            // A
    int A[] = {0, 0, 0, 1, 1, 1,  
            0, 1, 1, 1, 0, 0,
            1, 0, 0, 1, 0, 0,
            0, 1, 1, 1, 0, 0,
            0, 0, 0, 1, 1, 1};
    memcpy(chars, A, 30*sizeof(int));
}
void setB(int *chars) {
    int B[] = {1, 1, 1, 1, 1, 1,
            1, 0, 1, 0, 0, 1,
            1, 0, 1, 0, 0, 1,
            0, 1, 1, 0, 0, 1,
            0, 0, 0, 1, 1, 0};
    memcpy(chars, B, 30*sizeof(int));
}
          
void setC(int *chars) {
    int C[] = {0, 0, 1, 1, 0, 0,
            0, 1, 0, 0, 1, 0,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 1,
            0, 1, 0, 0, 1, 0};
    memcpy(chars, C, 30*sizeof(int));
}

void setD(int *chars) {
     int D[] = {1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 1,
            0, 1, 0, 0, 1, 0,
            0, 0, 1, 1, 0, 0};
     memcpy(chars, D, 30*sizeof(int));
}
 
void setE(int *chars) {
     int E[] = {1, 1, 1, 1, 1, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 0, 0, 1};
     memcpy(chars, E, 30*sizeof(int));
}
 
void setF(int *chars) {
    int F[] = {1, 1, 1, 1, 1, 1,
            1, 0, 1, 0, 0, 0,
            1, 0, 1, 0, 0, 0,
            1, 0, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0};
    memcpy(chars, F, 30*sizeof(int));
}

void setG(int *chars) {
    int G[] = {1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 1, 1};
    memcpy(chars, G, 30*sizeof(int));
}

void setH(int *chars) {
    int H[] = {1, 1, 1, 1, 1, 1,
            0, 0, 1, 0, 0, 0,
            0, 0, 1, 0, 0, 0,
            0, 0, 1, 0, 0, 0,
            1, 1, 1, 1, 1, 1};
    memcpy(chars, H, 30*sizeof(int));
}

void setI(int *chars) {
    int I[] = {1, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 1};
    memcpy(chars, I, 30*sizeof(int));
}

void setJ(int *chars) {
    int J[] = {1, 0, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0,
            1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 1, 1};
    memcpy(chars, J, 30*sizeof(int));
}
 
void setK(int *chars) {
    int K[] = {1, 1, 1, 1, 1, 1,
            0, 0, 1, 1, 0, 0,
            0, 0, 1, 1, 0, 0,
            0, 1, 1, 0, 1, 0,
            1, 0, 0, 0, 1, 1};
    memcpy(chars, K, 30*sizeof(int));
}
 
void setL(int * chars) {
    int L[] = {1, 1, 1, 1, 1, 1,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1};
    memcpy(chars, L, 30*sizeof(int));
}

void setM(int * chars) {
    int M[] = {1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0,
            0, 1, 1, 0, 0, 0,
            1, 0, 0, 0, 0, 0,
            1, 1, 1, 1, 1, 1};
    memcpy(chars, M, 30*sizeof(int));
}
/*
void setN(int *chars) {
    int N[] = {
            1, 1, 1, 1, 1, 1,
            1, 1, 0, 0, 0, 0,
            1, 1, 1, 1, 0, 0,
            0, 0, 0, 1, 1, 0,
            1, 1, 1, 1, 1, 1};
    memcpy(chars, N, 30*sizeof(int));
}

void setO(int *chars) {
    int O[] = {            
            0, 0, 1, 1, 0, 0,
            0, 1, 0, 0, 1, 0,
            1, 0 ,0 ,0, 0, 1,
            0, 1, 0, 0, 1, 0,
            0, 0, 1, 1, 0, 0};
    memcpy(chars, O, 30*sizeof(int));
}
        
        /*
            // P
            1, 1, 1, 1, 1, 1,
            1, 0, 0, 1, 0, 0,
            1, 0, 0, 1, 0, 0,
            1, 0, 0, 1, 0, 0,
            0, 1, 1, 0, 0, 0,
            // Q
            0, 0, 1, 1, 0, 0,
            0, 1, 0, 0, 1, 0,
            1, 0 ,0 ,1, 0, 1,
            0, 1, 0, 0, 1, 0,
            0, 0, 1, 1, 0, 1,
            // R
            1, 1, 1, 1, 1, 1,
            1, 0, 0, 1, 0, 0,
            1, 0, 0, 1, 0, 0, 
            0, 1, 1, 0, 1, 0,
            0, 0, 0, 0, 0, 1,
            // S
            0, 0, 1, 0, 0, 1,
            0, 1, 0, 1, 0, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 0, 1, 0, 1,
            0, 1, 0, 0, 1, 0,
            // T
            1, 0, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0,
            1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0,
            // U
            1, 1, 1, 1, 1, 0,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 0,
            // V
            1, 1, 1, 1, 0, 0,
            0, 0, 0, 0, 1, 0, 
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 1, 0,
            1, 1, 1, 1, 0, 0,
            // W
            1, 1, 1, 1, 1, 0,
            0, 0, 0, 0, 0, 1, 
            0, 0, 0, 1, 1, 1,
            0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 0,
            // X
            1, 0, 0, 0, 0, 1,
            0, 1, 0, 0, 1, 0,
            0, 0, 1, 1, 0, 0, 
            0, 1, 0, 0, 1, 0,
            1, 0, 0, 0, 0, 1,
            // Y
            1, 0, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0,
            0, 0, 1, 1, 1, 1,
            0, 1, 0, 0, 0, 0,
            1, 0, 0, 0, 0, 0, 
            // Z
            1, 0, 0, 0, 1, 1,
            1, 0, 0, 1, 0, 1,
            1, 0, 1, 0, 0, 1,
            1, 1, 0, 0, 0, 1,
            1, 0, 0, 0, 0 ,1};
*/
#endif
